---
layout: post
title: Relational 2 Graph - JDBC
lang: es
categories:
    - es
autor: Augusto Darraidou
---

#Getting the database structure

##Java™ JDBC API
> The Java Database Connectivity (JDBC) API provides universal data access from the Java programming language. Using the JDBC API, you can access virtually any data source, from relational databases to spreadsheets and flat files. JDBC technology also provides a common base on which tools and alternate interfaces can be built. <br> **Ref: [JDBC](http://docs.oracle.com/javase/7/docs/technotes/guides/jdbc/)**


# DatabaseMetaData

> This interface is implemented by driver vendors to let users know the capabilities of a Database Management System (DBMS) in combination with the driver based on JDBCTM technology ("JDBC driver") that is used with it. Different relational DBMSs often support different features, implement features in different ways, and use different data types. In addition, a driver may implement a feature on top of what the DBMS offers. Information returned by methods in this interface applies to the capabilities of a particular driver and a particular DBMS working together. Note that as used in this documentation, the term **database** is used generically to refer to both the driver and DBMS. <br> **Ref: [DatabaseMetaData](http://docs.oracle.com/javase/7/docs/api/java/sql/DatabaseMetaData.html)**

## Methods
These are the methods that we will pay attention

Column name | Type 
----|----
ResultSet | `getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)`<br>Retrieves the table types available in this database.
ResultSet | `getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern)`.<br> Retrieves a description of table columns available in the specified catalog.
ResultSet | `getPrimaryKeys(String catalog, String schema, String table)` <br> Retrieves a description of the given table's primary key columns.
ResultSet | `getImportedKeys(String catalog, String schema, String table)`<br> Retrieves a description of the primary key columns that are referenced by the given table's foreign key columns (the primary keys imported by a table).
ResultSet | `getExportedKeys(String catalog, String schema, String table)`<br> Retrieves a description of the foreign key columns that reference the given table's primary key columns (the foreign keys exported by a table).

### getTables
Devuelve un ResultSet con la siguiente información

Column name | Type | Description
----|----|---
**TABLE_CAT**	|	`String`	|	table catalog (may be null)
**TABLE_SCHEM**	|	`String`	|	table schema (may be null)
**TABLE_NAME**	|	`String`	|	table name
**TABLE_TYPE**	|	`String`	|	table type. Typical types are "TABLE", "VIEW", "SYSTEM TABLE", "GLOBAL TEMPORARY", "LOCAL TEMPORARY", "ALIAS", "SYNONYM".
**REMARKS**	|	`String`	|	explanatory comment on the table
**TYPE_CAT**	|	`String`	|	the types catalog (may be null)
**TYPE_SCHEM**	|	`String`	|	the types schema (may be null)
**TYPE_NAME**	|	`String`	|	type name (may be null)
**SELF_REFERENCING_COL_NAME**	|	`String`	|	name of the designated "identifier" column of a typed table (may be null)
**REF_GENERATION**	|	`String`	|	specifies how values in SELF_REFERENCING_COL_NAME are created. Values are "SYSTEM", "USER", "DERIVED". (may be null)

### getColumns
Devuelve un ResultSet con la siguiente información

Column name | Type
----|----
**TABLE_CAT**	|	`String`	|	table catalog (may be null)
**TABLE_SCHEM**	|	`String`	|	table schema (may be null)
**TABLE_NAME**	|	`String`	|	table name
**COLUMN_NAME**	|	`String`	|	column name
**DATA_TYPE**	|	`int`	|	SQL type from java.sql.Types
**TYPE_NAME**	|	`String`	|	Data source dependent type name, for a UDT the type name is fully qualified
**COLUMN_SIZE**	|	`int`	|	column size.
_BUFFER_LENGTH_	|	is not used.
**DECIMAL_DIGITS**	|	`int`	|	the number of fractional digits. Null is returned for data types where DECIMAL_DIGITS is not applicable.
**NUM_PREC_RADIX**	|	`int`	|	Radix (typically either 10 or 2)
**NULLABLE**	|	`int`	|	is NULL allowed. <br>`columnNoNulls`- might not allow NULL values<br>`columnNullable` - definitely allows NULL values<br>`columnNullableUnknown` - nullability unknown
**REMARKS**	|	`String`	|	comment describing column (may be null)
**COLUMN_DEF**	|	`String`	|	default value for the column, which should be interpreted as a string when the value is enclosed in single quotes (may be null)
**SQL_DATA_TYPE**	|	`int`	|	unused
**SQL_DATETIME_SUB**	|	`int`	|	unused
**CHAR_OCTET_LENGTH**	|	`int`	|	for char types the maximum number of bytes in the column
**ORDINAL_POSITION**	|	`int`	|	index of column in table (starting at 1)
**IS_NULLABLE**	|	`String`	|	ISO rules are used to determine the nullability for a column.<br>_YES_ --- if the column can include NULLs<br>_NO_ --- if the column cannot include NULLs<br>_empty string_ --- if the nullability for the column is unknown
**SCOPE_CATALOG**	|	`String`	|	catalog of table that is the scope of a reference attribute (null if DATA_TYPE isn't REF)
**SCOPE_SCHEMA**	|	`String`	|	schema of table that is the scope of a reference attribute (null if the DATA_TYPE isn't REF)
**SCOPE_TABLE**	|	`String`	|	table name that this the scope of a reference attribute (null if the DATA_TYPE isn't REF)
**SOURCE_DATA_TYPE**	|	`short`	|	source type of a distinct type or user-generated Ref type, SQL type from java.sql.Types (null if DATA_TYPE isn't DISTINCT or user-generated REF)
**IS_AUTOINCREMENT**	|	`String`	|	Indicates whether this column is auto incremented<br>_YES_ --- if the column is auto incremented<br>_NO_ --- if the column is not auto incremented <br>_empty string_ --- if it cannot be determined whether the column is auto incremented
**IS_GENERATEDCOLUMN**	|	`String`	|	Indicates whether this is a generated column<br>_YES_ --- if this a generated column<br>_NO_ --- if this not a generated column<br>_empty string_ --- if it cannot be determined whether this is a generated column

### getPrimaryKeys

Devuelve un ResultSet con la siguiente información

Column name | Type | Description
----|----|---
**TABLE_CAT**	|	`String`	|	table catalog (may be null)
**TABLE_SCHEM**	|	`String`	|	table schema (may be null)
**TABLE_NAME**	|	`String`	|	table name
**COLUMN_NAME**	|	`String`	|	column name
**KEY_SEQ**	|	`short`	|	sequence number within primary key( a value of 1 represents the first column of the primary key, a value of 2 would represent the second column within the primary key).
**PK_NAME**	|	`String`	|	primary key name (may be null)


### getImportedKeys && getExportedKeys

Devuelve un ResultSet con la siguiente información

Column name | Type | Description
----|----|---
**PKTABLE_CAT**	|	`String`	|	primary key table catalog being imported (may be null)
**PKTABLE_SCHEM**	|	`String`	|	primary key table schema being imported (may be null)
**PKTABLE_NAME**	|	`String`	|	primary key table name being imported
**PKCOLUMN_NAME**	|	`String`	|	primary key column name being imported
**FKTABLE_CAT**	|	`String`	|	foreign key table catalog (may be null)
**FKTABLE_SCHEM**	|	`String`	|	foreign key table schema (may be null)
**FKTABLE_NAME**	|	`String`	|	foreign key table name
**FKCOLUMN_NAME**	|	`String`	|	foreign key column name
**KEY_SEQ**	|	`short`	|	sequence number within a foreign key( a value of 1 represents the first column of the foreign key, a value of 2 would represent the second column within the foreign key).
**UPDATE_RULE**	|	`short`	|	What happens to a foreign key when the primary key is updated: <br>importedNoAction - do not allow update of primary key if it has been imported <br>`importedKeyCascade` - change imported key to agree with primary key update <br>`importedKeySetNull` - change imported key to NULL if its primary key has been updated <br>`importedKeySetDefault` - change imported key to default values if its primary key has been updated <br>`importedKeyRestrict` - same as importedKeyNoAction (for ODBC 2.x compatibility)
**DELETE_RULE**	|	`short`	|	What happens to the foreign key when primary is deleted. <br>`importedKeyNoAction` - do not allow delete of primary key if it has been imported <br>`importedKeyCascade` - delete rows that import a deleted key <br>`importedKeySetNull` - change imported key to NULL if its primary key has been deleted <br>`importedKeyRestrict` - same as importedKeyNoAction (for ODBC 2.x compatibility) <br>`importedKeySetDefault` - change imported key to default if its primary key has been deleted
**FK_NAME**	|	`String`	|	foreign key name (may be null)
**PK_NAME**	|	`String`	|	primary key name (may be null)
**DEFERRABILITY**	|	`short`	|	can the evaluation of foreign key constraints be deferred until commit <br>`importedKeyInitiallyDeferred` - see SQL92 for definition <br>`importedKeyInitiallyImmediate` - see SQL92 for definition <br>`importedKeyNotDeferrable` - see SQL92 for definition


----------

Con estos métodos puedo obtener la estructura de una base de datos en particular.
Si tomamos el ejemplo de Sakila

**1. Obtenemos las tablas a**

{% highlight java %}
List<DBTable> tablesList = new ArrayList<>();
DatabaseMetaData dmd = con.getMetaData();
ResultSet rs = dmd.getTables("sakila", null, null, tableTypes)) {
while(rs.next()){
    tablesList.add(new DBTable(rs));
} 
{% endhighlight %}

**2. Luego por cada tabla obtenemos sus columnas y PrimaryKey**

{% highlight java %}
for(DBTable table : tableList){
   List<DBColumn> columnList = new ArrayList<>();

   //Columns
   ResultSet rs = dmd.getColumns("sakila", null, table.getTableName(), null)) {
   while(rs.next()){
      columnList.add(new DBColumn(rs));
   } 
   table.setColumns(columnList);

   //PrimaryKey
   List<DBPrimaryKey> primaryKeyList = new ArrayList<>();
   ResultSet rs = dmd.getPrimaryKey("sakila", null, table.getTableName())) {
   while(rs.next()){
      primaryKeyList.add(new DBPrimaryKey(rs));
   } 
   table.setPrimaryKey(primaryKeyList);
}
{% endhighlight %}


**3. Obtenemos las ForeignKeys**

{% highlight java %}
 List<DBForeignKey> foreignKeyList = new ArrayList<>();
 DatabaseMetaData dmd = con.getMetaData();
 ResultSet rs = dmd.getImportedKeys("sakila", null, table.getTableName())) {
 while(rs.next()){
    foreignKeyList.add(new DBForeignKey(rs));
 } 
 table.setForeignKeyList(foreignKeyList);

{% endhighlight %}

**4. Establecemos las relaciones entre tablas las ForeignKeys**

{% highlight java %} 

{% endhighlight %}

Ya tenemos el modelo armado y con datos para poder trabajarlos. Utilizando algún motor de plantillas se puede utilizar para generar, entre otras cosas, código. desde JavaBeans, archivos de mapeo de HIbrenate, etc. Yo lo voy a utilizar para crear una base de grafos donde se encuentre guardados los metadatos de una base relacional. después mostraré como se puede navegar y descubrir las relaciones existente en este esquema



